import { pool, safeQuery } from "./server/shared-functions.js";

console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");

try {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log("\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:");
  const usersResult = await safeQuery(
    "SELECT id, first_name, last_name FROM users ORDER BY id",
    [],
    "–ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
  );

  usersResult.rows.forEach((user) => {
    console.log(`  ID: ${user.id}, –ò–º—è: ${user.first_name} ${user.last_name}`);
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log("\nüìû –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:");
  const phonesResult = await safeQuery(
    `SELECT up.user_id, up.phone_number, u.first_name, u.last_name 
     FROM user_phones up 
     JOIN users u ON up.user_id = u.id 
     ORDER BY up.user_id`,
    [],
    "–ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
  );

  phonesResult.rows.forEach((phone) => {
    console.log(
      `  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${phone.first_name} ${phone.last_name} (ID: ${phone.user_id}) ‚Üí –ù–æ–º–µ—Ä: ${phone.phone_number}`
    );
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getUserByPhone –¥–ª—è –Ω–æ–º–µ—Ä–∞ 777
  console.log("\nüîç –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ getUserByPhone –¥–ª—è –Ω–æ–º–µ—Ä–∞ '777':");
  const testResult = await safeQuery(
    `SELECT u.id, u.first_name, u.last_name, up.phone_number 
     FROM users u 
     JOIN user_phones up ON u.id = up.user_id 
     WHERE up.phone_number = $1`,
    ["777"],
    "—Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É 777"
  );

  if (testResult.rows.length > 0) {
    const user = testResult.rows[0];
    console.log(
      `  ‚úÖ –ù–∞–π–¥–µ–Ω: ${user.first_name} ${user.last_name} (ID: ${user.id})`
    );
  } else {
    console.log("  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º '777' –Ω–µ –Ω–∞–π–¥–µ–Ω");
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getUserByPhone –¥–ª—è –Ω–æ–º–µ—Ä–∞ 888
  console.log("\nüîç –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ getUserByPhone –¥–ª—è –Ω–æ–º–µ—Ä–∞ '888':");
  const testResult2 = await safeQuery(
    `SELECT u.id, u.first_name, u.last_name, up.phone_number 
     FROM users u 
     JOIN user_phones up ON u.id = up.user_id 
     WHERE up.phone_number = $1`,
    ["888"],
    "—Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É 888"
  );

  if (testResult2.rows.length > 0) {
    const user = testResult2.rows[0];
    console.log(
      `  ‚úÖ –ù–∞–π–¥–µ–Ω: ${user.first_name} ${user.last_name} (ID: ${user.id})`
    );
  } else {
    console.log("  ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º '888' –Ω–µ –Ω–∞–π–¥–µ–Ω");
  }
} catch (error) {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", error);
} finally {
  await pool.end();
  console.log("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
}
