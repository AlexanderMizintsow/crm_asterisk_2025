import { pool, safeQuery, log } from "./shared-functions.js";

const checkAndCreateUser109 = async () => {
  try {
    console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–º–µ—Ä–æ–º 109...");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º 109
    const result = await safeQuery(
      `SELECT 
        u.id,
        u.first_name,
        u.last_name,
        u.status,
        up.phone_number,
        up.phone_type,
        up.is_primary
       FROM users u 
       JOIN user_phones up ON u.id = up.user_id 
       WHERE up.phone_number = '109'`,
      [],
      "–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 109"
    );

    if (result.rows.length > 0) {
      console.log("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º 109 –Ω–∞–π–¥–µ–Ω:");
      console.log(JSON.stringify(result.rows[0], null, 2));
    } else {
      console.log("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º 109 –Ω–µ –Ω–∞–π–¥–µ–Ω");

      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ê–ª–∏–≥–∞–¥–∂–∏–µ–≤–∞ –ò—Ä–∏–Ω–∞...");

      const newUser = await safeQuery(
        `INSERT INTO users (
          first_name, 
          last_name, 
          username, 
          email, 
          status,
          created_at
        ) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id`,
        [
          "–ò—Ä–∏–Ω–∞",
          "–ê–ª–∏–≥–∞–¥–∂–∏–µ–≤–∞",
          "aligadzhieva_irina",
          "irina.aligadzhieva@example.com",
          "active",
          new Date().toISOString(),
        ],
        "—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ê–ª–∏–≥–∞–¥–∂–∏–µ–≤–∞ –ò—Ä–∏–Ω–∞"
      );

      const userId = newUser.rows[0].id;
      console.log("‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID:", userId);

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      await safeQuery(
        `INSERT INTO user_phones (
          user_id, 
          phone_number, 
          phone_type, 
          is_primary
        ) VALUES ($1, $2, $3, $4)`,
        [userId, "109", "extension", true],
        "–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ 109"
      );

      console.log("‚úÖ –ù–æ–º–µ—Ä 109 –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é");
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log("\nüìû –í—Å–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–æ–º–µ—Ä–∞:");
    const allNumbers = await safeQuery(
      `SELECT 
        u.id,
        u.first_name,
        u.last_name,
        u.status,
        up.phone_number,
        up.phone_type,
        up.is_primary
       FROM users u 
       JOIN user_phones up ON u.id = up.user_id 
       WHERE up.phone_type IN ('extension', 'work')
       ORDER BY up.phone_number`,
      [],
      "–ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–º–µ—Ä–æ–≤"
    );

    allNumbers.rows.forEach((row, index) => {
      console.log(
        `${index + 1}. ${row.phone_number} - ${row.first_name} ${
          row.last_name
        } (${row.status})`
      );
    });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
  } finally {
    await pool.end();
  }
};

checkAndCreateUser109();
