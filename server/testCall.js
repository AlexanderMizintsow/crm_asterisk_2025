import { io } from "socket.io-client";

console.log("üìû –¢–µ—Å—Ç –∑–≤–æ–Ω–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ 777");
console.log("üéØ –õ–æ–≥–∏–∫–∞: –∑–≤–æ–Ω–æ–∫ ‚Üí –ø—Ä–∏–Ω—è—Ç–∏–µ ‚Üí –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫ (5—Å) ‚Üí –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ");

const socket = io("http://localhost:3771");

let callId777 = null;
let currentUserId = null; // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// let callId888 = null; // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è 777

socket.on("connect", async () => {
  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");

  try {
    const { pool } = await import("./shared-functions.js");

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å –Ω–æ–º–µ—Ä–æ–º 777 (–ò–≤–∞–Ω)
    const result = await pool.query(
      `SELECT u.id, u.first_name, u.last_name, up.phone_number 
       FROM users u 
       JOIN user_phones up ON u.id = up.user_id 
       WHERE up.phone_number = $1`,
      ["777"]
    );

    if (result.rows.length > 0) {
      const userId = result.rows[0].id;
      currentUserId = userId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = result.rows[0];
      console.log(
        `üë§ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞–∫: ${user.first_name} ${user.last_name} (ID: ${userId})`
      );
      console.log(`üìû –ù–æ–º–µ—Ä: ${user.phone_number}`);

      // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
      socket.emit("authenticate", { userId });
    } else {
      console.error("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º 777 –Ω–µ –Ω–∞–π–¥–µ–Ω!");
      console.log("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node server/setup-database.js");
      process.exit(1);
    }
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
    process.exit(1);
  }
});

socket.on("authenticated", (data) => {
  console.log("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");

  // –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
  setTimeout(() => {
    console.log("\nüéØ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢ –ó–í–û–ù–ö–û–í");
    console.log("=" * 50);

    // –¢–ï–°–¢: –ó–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä 777
    console.log("\nüìû –¢–ï–°–¢: –ó–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä 777");
    const testCall777 = {
      caller_number: "+7 (495) 123-45-67",
      receiver_number: "777",
      timestamp: new Date().toISOString(),
      status: "incoming",
      assigned_user_id: currentUserId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      caller_company_name: "–û–û–û –¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è",
    };

    socket.emit("incoming-call", testCall777);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤–æ–Ω–æ–∫ –∏ –∂–¥–µ–º –µ–≥–æ ID –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º
    console.log("\nüìû –û–∂–∏–¥–∞–µ–º ID –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è...");

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∑–≤–æ–Ω–∫–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è ID
    const acceptCallAfterId = () => {
      if (callId777) {
        console.log("\nüìû –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–≤–æ–Ω–æ–∫ 777 (ID:", callId777, ")");
        socket.emit("answer-call", {
          callId: callId777,
          action: "accept",
          initialData: {
            notes: "–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏",
            customerName: "–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç",
            company: "–û–û–û –¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è",
          },
        });
      } else {
        console.log("‚è≥ –û–∂–∏–¥–∞–µ–º ID –∑–≤–æ–Ω–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è...");
        setTimeout(acceptCallAfterId, 500); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 500–º—Å
      }
    };

    // –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ ID –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
    setTimeout(acceptCallAfterId, 3000);

    // –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è ID –∑–≤–æ–Ω–∫–∞ –∏ –∑–∞—Ç–µ–º –∑–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ
    const waitForCallIdAndEnd = () => {
      if (callId777) {
        console.log("\n‚è±Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –¥–ª–∏—Ç—Å—è 5 —Å–µ–∫—É–Ω–¥...");

        // –ß–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥ –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫
        setTimeout(() => {
          console.log("\nüìû –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ 777 (ID:", callId777, ")");
          socket.emit("end-call", {
            callId: callId777,
            callData: {
              duration: 5, // 5 —Å–µ–∫—É–Ω–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
              notes: "–¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏",
              endTime: new Date().toISOString(),
            },
          });

          // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ—Å—Ç
          setTimeout(() => {
            console.log("\nüèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù");
            console.log("‚úÖ –ó–≤–æ–Ω–æ–∫ 777 –æ–±—Ä–∞–±–æ—Ç–∞–Ω");
            socket.disconnect();
            process.exit(0);
          }, 2000);
        }, 5000); // 5 —Å–µ–∫—É–Ω–¥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
      } else {
        console.log("‚è≥ –û–∂–∏–¥–∞–µ–º ID –∑–≤–æ–Ω–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...");
        setTimeout(waitForCallIdAndEnd, 500); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 500–º—Å
      }
    };

    // –ù–∞—á–∏–Ω–∞–µ–º –æ–∂–∏–¥–∞–Ω–∏–µ ID –∑–≤–æ–Ω–∫–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(waitForCallIdAndEnd, 2000);
  }, 2000);
});

socket.on("incoming-call", (call) => {
  console.log("\nüìû –ü–û–õ–£–ß–ï–ù–û –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –û –ó–í–û–ù–ö–ï!");
  console.log("üìã –î–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞:", {
    id: call.id,
    caller: call.caller_number,
    receiver: call.receiver_number,
    assigned_user_id: call.assigned_user_id,
    company: call.caller_company_name,
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–≤–æ–Ω–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞ 777
  if (call.receiver_number === "777") {
    callId777 = call.id;
    console.log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω ID –∑–≤–æ–Ω–∫–∞ 777:", callId777);
    console.log("‚úÖ –ì–æ—Ç–æ–≤ –∫ –ø—Ä–∏–Ω—è—Ç–∏—é –∑–≤–æ–Ω–∫–∞!");
  }
  // else if (call.receiver_number === "888") {
  //   callId888 = call.id;
  //   console.log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω ID –∑–≤–æ–Ω–∫–∞ 888:", callId888);
  // }

  // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  console.log("üîç –¢–µ–∫—É—â–∏–π ID –∑–≤–æ–Ω–∫–∞:");
  console.log("  - callId777:", callId777);
  console.log("  - currentUserId:", currentUserId);
  console.log("  - call.assigned_user_id:", call.assigned_user_id);
  // console.log("  - callId888:", callId888); // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
});

socket.on("call-answered", (data) => {
  console.log("‚úÖ –ó–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç:", data);
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–≤–æ–Ω–∫–∞ –∏–∑ —Å–æ–±—ã—Ç–∏—è call-answered
  if (data.callId) {
    callId777 = data.callId;
    console.log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω ID –∑–≤–æ–Ω–∫–∞ –∏–∑ call-answered:", callId777);
  }
});

socket.on("call-ended", (data) => {
  console.log("‚úÖ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω:", data);
  console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞:", data.callId);
  console.log("üîç –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º ID:");
  console.log("  - callId777:", callId777);
  console.log("üîç –î–∞–Ω–Ω—ã–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:");
  console.log("  - endedAt:", data.endedAt);
  console.log("  - duration:", data.duration);
  console.log("  - userId:", data.userId);
  // console.log("  - callId888:", callId888); // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
});

socket.on("connect_error", (error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error.message);
  console.log("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm run servers");
  process.exit(1);
});

socket.on("error", (error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞:", error);
});

// –¢–∞–π–º–∞—É—Ç
setTimeout(() => {
  console.log("\n‚è∞ –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∞");
  socket.disconnect();
  process.exit(1);
}, 60000); // 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
