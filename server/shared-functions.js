import { Pool } from "pg";

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö TestA
const pool = new Pool({
  user: "postgres",
  host: "localhost",
  database: "testA",
  password: "postgres",
  port: 5432,
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
const log = {
  info: (message, data = {}) => {
    console.log(`üîµ [INFO] ${message}`, Object.keys(data).length ? data : "");
  },
  error: (message, error = null) => {
    console.error(`üî¥ [–û–®–ò–ë–ö–ê] ${message}`, error ? error.message : "");
  },
  success: (message, data = {}) => {
    console.log(`üü¢ [–£–°–ü–ï–•] ${message}`, Object.keys(data).length ? data : "");
  },
  warning: (message, data = {}) => {
    console.warn(
      `üü° [–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï] ${message}`,
      Object.keys(data).length ? data : ""
    );
  },
};

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
const safeQuery = async (query, params = [], operation = "–æ–ø–µ—Ä–∞—Ü–∏—è") => {
  try {
    const result = await pool.query(query, params);
    log.success(`${operation} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`, {
      rowCount: result.rowCount,
    });
    return result;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ ${operation}`, error);
    throw error;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const getUserByPhone = async (phoneNumber) => {
  if (!phoneNumber) {
    log.warning("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞");
    return null;
  }

  try {
    const result = await safeQuery(
      `SELECT u.id, u.first_name, u.last_name, up.phone_number 
       FROM users u 
       JOIN user_phones up ON u.id = up.user_id 
       WHERE up.phone_number = $1`,
      [phoneNumber],
      `–ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É ${phoneNumber}`
    );

    if (result.rows.length > 0) {
      log.success(`–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${phoneNumber}`, {
        userId: result.rows[0].id,
        name: `${result.rows[0].first_name} ${result.rows[0].last_name}`,
      });
      return result.rows[0];
    }

    log.warning(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${phoneNumber}`);
    return null;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É ${phoneNumber}`, error);
    return null;
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
const getCompanyByPhone = async (phoneNumber) => {
  if (!phoneNumber) return null;

  try {
    const result = await safeQuery(
      `SELECT c.id, c.name_companies, pnc.phone_number 
       FROM companies c 
       JOIN phone_numbers_companies pnc ON c.id = pnc.company_id 
       WHERE pnc.phone_number = $1`,
      [phoneNumber],
      `–ø–æ–∏—Å–∫ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É ${phoneNumber}`
    );

    if (result.rows.length > 0) {
      log.success(`–ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–ø–∞–Ω–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ ${phoneNumber}`, {
        companyId: result.rows[0].id,
        name: result.rows[0].name_companies,
      });
      return result.rows[0];
    }

    return null;
  } catch (error) {
    log.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É ${phoneNumber}`, error);
    return null;
  }
};

export { pool, log, safeQuery, getUserByPhone, getCompanyByPhone };
