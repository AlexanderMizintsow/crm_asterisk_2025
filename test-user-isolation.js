import { io } from "socket.io-client";

console.log("üß™ –¢–µ—Å—Ç –∏–∑–æ–ª—è—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
console.log(
  "üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º: –∑–≤–æ–Ω–æ–∫ –Ω–∞ 888 –ù–ï –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –Ω–æ–º–µ—Ä–æ–º 777"
);

const socket = io("http://localhost:3771");
let userId = 14; // –ò–≤–∞–Ω (–Ω–æ–º–µ—Ä 777)
let notifications = 0;

socket.on("connect", () => {
  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
  socket.emit("authenticate", { userId });
});

socket.on("authenticated", () => {
  console.log("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
  console.log("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ò–≤–∞–Ω (ID: 14, –Ω–æ–º–µ—Ä: 777)");

  setTimeout(() => {
    console.log(
      "\nüìû –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤–æ–Ω–æ–∫ –Ω–∞ –Ω–æ–º–µ—Ä 888 (–¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ª—å–∫–æ –ü–µ—Ç—Ä)"
    );
    console.log("üìã –î–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞:", {
      caller_number: "+7 (812) 555-12-34",
      receiver_number: "888",
      assigned_user_id: 15, // –ü–µ—Ç—Ä
    });

    const testCall = {
      caller_number: "+7 (812) 555-12-34",
      receiver_number: "888",
      timestamp: new Date().toISOString(),
      status: "incoming",
      assigned_user_id: 15, // –ü–µ—Ç—Ä (–Ω–æ–º–µ—Ä 888)
      caller_company_name: "–û–û–û –¢–µ—Å—Ç–æ–≤–∞—è –ö–æ–º–ø–∞–Ω–∏—è",
    };

    socket.emit("incoming-call", testCall);
    console.log("üì§ –ó–≤–æ–Ω–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä");

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      console.log(`\nüîç –†–ï–ó–£–õ–¨–¢–ê–¢: –ø–æ–ª—É—á–µ–Ω–æ ${notifications} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);

      if (notifications === 0) {
        console.log(
          "‚úÖ –¢–ï–°–¢ –ü–†–û–®–ï–õ! –ò–≤–∞–Ω –ù–ï –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–≤–æ–Ω–∫–µ –Ω–∞ 888"
        );
        console.log("‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        process.exit(0);
      } else {
        console.log(
          `‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ! –ò–≤–∞–Ω –ø–æ–ª—É—á–∏–ª ${notifications} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–≤–æ–Ω–∫–µ –Ω–∞ 888`
        );
        console.log("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–∑–æ–ª—è—Ü–∏–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π");
        process.exit(1);
      }
    }, 5000);
  }, 1000);
});

socket.on("incoming-call", (call) => {
  notifications++;
  console.log(`üìû –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #${notifications}:`, {
    id: call.id,
    caller: call.caller_number,
    receiver: call.receiver_number,
    assigned_user_id: call.assigned_user_id,
  });
});

socket.on("connect_error", (error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", error.message);
  process.exit(1);
});

socket.on("error", (error) => {
  console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∫–µ—Ç–∞:", error);
});

socket.on("disconnect", (reason) => {
  console.log("üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ:", reason);
});

// –¢–∞–π–º–∞—É—Ç
setTimeout(() => {
  console.log("\n‚è∞ –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∞");
  process.exit(1);
}, 10000);
