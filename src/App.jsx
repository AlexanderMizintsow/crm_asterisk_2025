import React, { useState, useEffect } from "react";
import { Phone, PhoneCall, Users, Play } from "lucide-react";
import CallModal from "./components/crm_asterisk/CallModal";
import ActiveCallCard from "./components/crm_asterisk/ActiveCallCard";
import CallHistory from "./components/crm_asterisk/CallHistory";
import CallDetails from "./components/crm_asterisk/CallDetails";

import useSocket from "./hooks/useSocket";

import "./styles/main.scss";

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
const CONFIG = {
  API_URL: "http://localhost:3771/api",
  WEBSOCKET_URL: "http://localhost:3771",
  TIMEOUT: 10000,
  RETRY_ATTEMPTS: 3,
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
const apiRequest = async (url, options = {}) => {
  const controller = new AbortController();
  const timeoutId = setTimeout(() => controller.abort(), CONFIG.TIMEOUT);

  try {
    const response = await fetch(url, {
      ...options,
      signal: controller.signal,
      headers: {
        "Content-Type": "application/json",
        ...options.headers,
      },
    });

    clearTimeout(timeoutId);

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    return await response.json();
  } catch (error) {
    clearTimeout(timeoutId);
    if (error.name === "AbortError") {
      throw new Error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    }
    throw error;
  }
};

function App() {
  const [incomingCall, setIncomingCall] = useState(null);
  const [showCallModal, setShowCallModal] = useState(false);
  const [activeCall, setActiveCall] = useState(null);
  const [showActiveCall, setShowActiveCall] = useState(false);
  const [calls, setCalls] = useState([]);
  const [selectedCall, setSelectedCall] = useState(null);
  const [showCallDetails, setShowCallDetails] = useState(false);
  const [activeCalls, setActiveCalls] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [serverStatus, setServerStatus] = useState("checking");

  // ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π)
  const CURRENT_USER_ID = 14; // –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤

  const { socket, isConnected, emit, on } = useSocket(CONFIG.WEBSOCKET_URL);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–≤–æ–Ω–∫–æ–≤
  useEffect(() => {
    const fetchCalls = async () => {
      if (!CURRENT_USER_ID) {
        setError("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        setLoading(false);
        return;
      }

      setLoading(true);
      setError(null);
      setServerStatus("checking");

      try {
        const data = await apiRequest(
          `${CONFIG.API_URL}/calls?userId=${CURRENT_USER_ID}`
        );
        setCalls(data.data || []);
        setServerStatus("online");
        console.log(
          "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∑–≤–æ–Ω–∫–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:",
          data.data?.length || 0,
          "–∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          CURRENT_USER_ID
        );
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–≤–æ–Ω–∫–æ–≤:", error.message);
        setServerStatus("offline");

        if (error.message.includes("Failed to fetch")) {
          setError(
            "–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3771"
          );
        } else {
          setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
        }
        setCalls([]);
      } finally {
        setLoading(false);
      }
    };

    fetchCalls();
  }, []);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    if (isConnected && serverStatus !== "online") {
      setServerStatus("online");
    }
  }, [isConnected, serverStatus]);

  // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
  useEffect(() => {
    if (socket && isConnected) {
      console.log("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", CURRENT_USER_ID);
      emit("authenticate", { userId: CURRENT_USER_ID });
    }
  }, [socket, isConnected, emit]);

  // –§—É–Ω–∫—Ü–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
  const simulateIncomingCall = () => {
    const testNumbers = [
      "+7 (495) 123-45-67",
      "+7 (812) 555-12-34",
      "+7 (903) 777-88-99",
    ];

    const randomCaller =
      testNumbers[Math.floor(Math.random() * testNumbers.length)];
    const newCall = {
      id: Date.now(),
      caller_number: randomCaller,
      receiver_number: "777",
      timestamp: new Date().toISOString(),
      status: "incoming",
      assigned_user_id: CURRENT_USER_ID,
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–≤–æ–Ω–æ–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    emit("incoming-call", newCall);

    console.log(
      "üîî –ò–º–∏—Ç–∞—Ü–∏—è –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞ –æ—Ç:",
      randomCaller,
      "–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
      CURRENT_USER_ID
    );
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
  const handleCallStarted = (callId, callData) => {
    console.log("üìû –ó–≤–æ–Ω–æ–∫ –ø–µ—Ä–µ—à–µ–ª –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º:", callId, callData);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–≤–æ–Ω–∫–∞
    emit("answer-call", {
      callId: callId,
      action: "accept",
    });

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    const callToActivate = activeCalls.find((call) => call.id === callId);
    if (callToActivate) {
      setActiveCall({
        ...callToActivate,
        status: "active",
      });
      setShowActiveCall(true);
      setShowCallModal(false);
      setIncomingCall(null);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ WebSocket —Å–æ–±—ã—Ç–∏–π
  useEffect(() => {
    if (!socket) return;

    const unsubscribeIncoming = on("incoming-call", (call) => {
      if (!call?.id) return;

      console.log(
        "üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫:",
        call.caller_number,
        "‚Üí",
        call.receiver_number
      );
      console.log("üë§ ID –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", call.assigned_user_id);
      console.log("üë§ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", CURRENT_USER_ID);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–≤–æ–Ω–æ–∫ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (call.assigned_user_id === CURRENT_USER_ID) {
        setIncomingCall(call);
        setShowCallModal(true);
        setActiveCalls((prev) => [...prev, call]);
        console.log(
          "‚úÖ –ó–≤–æ–Ω–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
        );
      } else {
        console.log(
          "‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º"
        );
      }
    });

    const unsubscribeAnswered = on("call-answered", (data) => {
      if (!data?.callId) return;

      console.log(
        "‚úÖ –ó–≤–æ–Ω–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å–µ—Ä–≤–µ—Ä–æ–º:",
        data.action,
        "–¥–ª—è",
        data.callId
      );
      console.log("üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:", data);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–≤–æ–Ω–∫–æ–≤
      setCalls((prev) =>
        prev.map((call) =>
          call.id === data.callId
            ? {
                ...call,
                status: data.action === "accept" ? "accepted" : "rejected",
                notes: data.notes || "",
              }
            : call
        )
      );

      // –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω, –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      if (data.action !== "accept") {
        setActiveCalls((prev) =>
          prev.filter((call) => call.id !== data.callId)
        );
        setShowCallModal(false);
        setIncomingCall(null);
      }
    });

    const unsubscribeActiveCalls = on("active-calls", (calls) => {
      if (!Array.isArray(calls)) return;
      console.log("üìã –û–±–Ω–æ–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤:", calls.length);
      console.log(
        "üìã ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤:",
        calls.map((c) => c.id)
      );
      setActiveCalls(calls);
    });

    const unsubscribeNotesUpdated = on("notes-updated", (data) => {
      if (!data?.callId) return;
      console.log("üìù –û–±–Ω–æ–≤–ª–µ–Ω—ã –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∑–≤–æ–Ω–∫–∞:", data.callId);
      setCalls((prev) =>
        prev.map((call) =>
          call.id === data.callId ? { ...call, notes: data.notes } : call
        )
      );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–æ–ª–æ–∂–µ–Ω–∏–∏ —Ç—Ä—É–±–∫–∏)
    const unsubscribeCallEnded = on("call-ended", (data) => {
      console.log("üéØ –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï call-ended:", data);

      if (!data?.callId) {
        console.log("‚ùå –ù–µ—Ç callId –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è call-ended");
        return;
      }

      console.log("üìû –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º:", data);

      // –ï—Å–ª–∏ —ç—Ç–æ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å, –Ω–æ –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
      if (activeCall && activeCall.id === data.callId) {
        console.log("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –Ω–∞ 'completed'");
        setActiveCall((prev) => {
          const updated = {
            ...prev,
            status: "completed",
            ended_at: data.endedAt || new Date().toISOString(),
            duration: data.duration || 0,
          };
          console.log("‚úÖ –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞:", updated.status);
          console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞:", {
            id: updated.id,
            status: updated.status,
            ended_at: updated.ended_at,
            duration: updated.duration,
          });
          return updated;
        });
        console.log(
          "üí° –û–∫–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"
        );
      } else {
        console.log("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ ID –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç");
        console.log("–ê–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫:", activeCall);
        console.log("ID –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞:", data.callId);
        console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –º–µ—Å—Ç–∞:");
        console.log("  - incomingCall:", incomingCall?.id);
        console.log(
          "  - activeCalls:",
          activeCalls.map((c) => c.id)
        );
      }

      // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
      setActiveCalls((prev) =>
        prev.map((call) =>
          call.id === data.callId
            ? {
                ...call,
                status: "completed",
                ended_at: data.endedAt || new Date().toISOString(),
                duration: data.duration || 0,
              }
            : call
        )
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∑–≤–æ–Ω–∫–æ–≤
      setCalls((prev) =>
        prev.map((call) =>
          call.id === data.callId
            ? {
                ...call,
                status: "completed",
                ended_at: data.endedAt || new Date().toISOString(),
                duration: data.duration || 0,
              }
            : call
        )
      );
    });

    return () => {
      unsubscribeIncoming?.();
      unsubscribeAnswered?.();
      unsubscribeActiveCalls?.();
      unsubscribeNotesUpdated?.();
      unsubscribeCallEnded?.();
    };
  }, [socket, on, incomingCall]);

  const handleAnswerCall = (callId, action, initialData) => {
    if (!callId || !action) return;

    console.log("üìû –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫:", action, "–¥–ª—è", callId);

    // –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –ø—Ä–∏–Ω—è—Ç, —Å—Ä–∞–∑—É –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
    if (action === "accept") {
      console.log("üöÄ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞:", callId);

      // –ò—â–µ–º –∑–≤–æ–Ω–æ–∫ –≤ incomingCall –∏–ª–∏ activeCalls
      let callToActivate =
        incomingCall && incomingCall.id === callId
          ? incomingCall
          : activeCalls.find((call) => call.id === callId);

      if (callToActivate) {
        setActiveCall({
          ...callToActivate,
          ...initialData,
          status: "active",
        });
        setShowActiveCall(true);
        setShowCallModal(false);
        setIncomingCall(null);

        // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
        setActiveCalls((prev) => prev.filter((call) => call.id !== callId));

        console.log("‚úÖ –ó–≤–æ–Ω–æ–∫ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
      } else {
        console.log("‚ùå –ó–≤–æ–Ω–æ–∫ –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
      }
    } else {
      const newCallRecord = {
        ...incomingCall,
        status: "rejected",
        notes: initialData.quickNotes || "",
        accepted_at: new Date().toISOString(),
        ...initialData,
      };
      setCalls((prev) => [newCallRecord, ...prev]);
      setShowCallModal(false);
      setIncomingCall(null);
    }

    emit("answer-call", { callId, action, initialData });
  };

  const handleEndCall = (callId, callData) => {
    if (!callId || !activeCall) return;

    console.log("üìû –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞:", callId);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –Ω–∞ "–∑–∞–≤–µ—Ä—à–µ–Ω", –Ω–æ –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
    setActiveCall((prev) => ({
      ...prev,
      status: "completed",
      ended_at: callData.endTime,
      duration: callData.duration,
    }));

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    emit("end-call", { callId, callData });
  };

  // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
  const handleCloseActiveCall = () => {
    if (!activeCall) return;

    console.log("üìû –†—É—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞:", activeCall.id);

    // –ï—Å–ª–∏ –∑–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
    if (activeCall.status === "completed") {
      const completedCall = {
        ...activeCall,
        status: "accepted",
        accepted_at: activeCall.answeredAt || new Date().toISOString(),
      };

      setCalls((prev) => [completedCall, ...prev]);
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
    setActiveCall(null);
    setShowActiveCall(false);
  };

  const handleSaveActiveCall = (callId, callData) => {
    if (!activeCall || !callId) return;

    console.log("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞:", callId);

    setActiveCall((prev) => ({ ...prev, ...callData }));
    emit("update-call-notes", {
      callId,
      notes: callData.notes,
      customerData: callData,
    });
  };

  const handleCallSelect = (call) => {
    if (!call) return;
    setSelectedCall(call);
    setShowCallDetails(true);
  };

  const handleCallUpdate = (updatedCall) => {
    if (!updatedCall?.id) return;
    setCalls((prev) =>
      prev.map((call) => (call.id === updatedCall.id ? updatedCall : call))
    );
  };

  const handleCloseCallModal = () => {
    setShowCallModal(false);
    setIncomingCall(null);
  };

  return (
    <div className="crm-app">
      {/* Header */}
      <header className="crm-header">
        <div className="crm-header__container">
          <div className="crm-header__logo">
            <div className="crm-header__logo-icon">
              <PhoneCall size={24} />
            </div>
            <div className="crm-header__logo-text">
              <h1>Asterisk CRM</h1>
              <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞–º–∏</p>
            </div>
          </div>

          <div className="crm-header__controls">
            {/* User Info */}
            <div className="user-info">
              <Users size={16} />
              <span>–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤ (ID: {CURRENT_USER_ID})</span>
              <span className="phone">üìû 777</span>
            </div>

            {/* Test Call Button */}
            <button
              onClick={simulateIncomingCall}
              className="btn btn--primary btn--small"
            >
              <Play size={16} />
              <span>–¢–µ—Å—Ç –∑–≤–æ–Ω–∫–∞</span>
            </button>

            {/* Connection Status */}
            <div
              className={`status-indicator ${
                serverStatus === "online" && isConnected
                  ? "status-indicator--connected"
                  : serverStatus === "checking"
                  ? "status-indicator--warning"
                  : "status-indicator--disconnected"
              }`}
            >
              <div
                className={`status-indicator__dot ${
                  serverStatus === "online" && isConnected
                    ? "status-indicator__dot--green"
                    : serverStatus === "checking"
                    ? "status-indicator__dot--yellow"
                    : "status-indicator__dot--red"
                }`}
              ></div>
              <span>
                {serverStatus === "online" && isConnected
                  ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
                  : serverStatus === "checking"
                  ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."
                  : "–û—Ç–∫–ª—é—á–µ–Ω–æ"}
              </span>
            </div>

            {/* Active Calls Counter */}
            {activeCalls.length > 0 && (
              <div className="status-indicator status-indicator--test">
                <Users size={16} />
                <span>–ê–∫—Ç–∏–≤–Ω—ã—Ö: {activeCalls.length}</span>
              </div>
            )}

            {/* Error indicator */}
            {error && (
              <div className="status-indicator status-indicator--error">
                <span title={error}>
                  {error.length > 50 ? `${error.substring(0, 50)}...` : error}
                </span>
              </div>
            )}
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="main-content">
        {/* Statistics Cards */}
        <div className="stats-grid">
          <div className="stats-card">
            <div className="stats-card__content">
              <div className="stats-card__info">
                <p>–í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤</p>
                <p className="value value--primary">{calls.length}</p>
              </div>
              <Phone className="stats-card__icon" />
            </div>
          </div>

          <div className="stats-card">
            <div className="stats-card__content">
              <div className="stats-card__info">
                <p>–ü—Ä–∏–Ω—è—Ç—ã—Ö</p>
                <p className="value value--success">
                  {calls.filter((call) => call.status === "accepted").length}
                </p>
              </div>
              <PhoneCall className="stats-card__icon" />
            </div>
          </div>

          <div className="stats-card">
            <div className="stats-card__content">
              <div className="stats-card__info">
                <p>–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö</p>
                <p className="value value--warning">
                  {calls.filter((call) => call.status === "missed").length}
                </p>
              </div>
              <Phone className="stats-card__icon" />
            </div>
          </div>

          <div className="stats-card">
            <div className="stats-card__content">
              <div className="stats-card__info">
                <p>–ê–∫—Ç–∏–≤–Ω—ã—Ö</p>
                <p className="value value--primary">{activeCalls.length}</p>
              </div>
              <Users className="stats-card__icon" />
            </div>
          </div>
        </div>

        {/* Call History */}
        <CallHistory
          calls={calls}
          onCallSelect={handleCallSelect}
          loading={loading}
          error={error}
        />
      </main>

      {/* Modals and Cards */}
      <CallModal
        call={incomingCall}
        onCallStarted={handleCallStarted}
        onClose={handleCloseCallModal}
        isVisible={showCallModal}
      />

      {showCallDetails && (
        <CallDetails
          call={selectedCall}
          onClose={() => setShowCallDetails(false)}
          onUpdate={handleCallUpdate}
        />
      )}

      <ActiveCallCard
        call={activeCall}
        onEndCall={handleEndCall}
        onSave={handleSaveActiveCall}
        onClose={handleCloseActiveCall}
        isVisible={showActiveCall}
      />
    </div>
  );
}

export default App;
