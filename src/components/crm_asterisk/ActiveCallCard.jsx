import React, { useState, useEffect } from "react";
import {
  Phone,
  PhoneOff,
  User,
  Clock,
  MessageSquare,
  Save,
  Mic,
  MicOff,
  Volume2,
  VolumeX,
  Building,
  Tag,
  UserPlus,
  Pause,
  Play,
} from "lucide-react";

const ActiveCallCard = ({ call, onEndCall, onSave, onClose, isVisible }) => {
  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ–ø—Å–æ–≤
  useEffect(() => {
    console.log("üîÑ ActiveCallCard: –ø—Ä–æ–ø—Å—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å:", {
      isVisible,
      callId: call?.id,
      callStatus: call?.status,
      hasCall: !!call,
    });
  }, [isVisible, call]);

  const [callDuration, setCallDuration] = useState(0);
  const [isMuted, setIsMuted] = useState(false);
  const [isSpeakerOn, setIsSpeakerOn] = useState(false);
  const [isOnHold, setIsOnHold] = useState(false);
  const [showTransferModal, setShowTransferModal] = useState(false);
  const [availableUsers, setAvailableUsers] = useState([]);
  const [selectedTransferUser, setSelectedTransferUser] = useState("");
  const [transferReason, setTransferReason] = useState("");
  const [callData, setCallData] = useState({
    customerName: "",
    company: "",
    email: "",
    callPurpose: "",
    notes: "",
    tags: [],
    priority: "medium",
    followUpDate: "",
    outcome: "",
  });
  const [newTag, setNewTag] = useState("");

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤–æ–Ω–∫–∞
  useEffect(() => {
    if (call?.status) {
      console.log(
        "üîÑ ActiveCallCard: —Å—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞ –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞:",
        call.status
      );
      console.log("üìã –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–≤–æ–Ω–∫–∞:", call);
    }
  }, [call?.status]);

  useEffect(() => {
    if (!isVisible || !call) return;

    const interval = setInterval(() => {
      if (!isOnHold) {
        setCallDuration((prev) => prev + 1);
      }
    }, 1000);

    return () => clearInterval(interval);
  }, [isVisible, call, isOnHold]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
  useEffect(() => {
    if (showTransferModal) {
      fetch("/api/users/available")
        .then((res) => res.json())
        .then((data) => {
          if (data.success) {
            setAvailableUsers(data.data);
          } else {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", data.error);
            setAvailableUsers([]);
          }
        })
        .catch((error) => {
          console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
          setAvailableUsers([]);
        });
    }
  }, [showTransferModal]);

  const formatDuration = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;

    if (hours > 0) {
      return `${hours}:${mins.toString().padStart(2, "0")}:${secs
        .toString()
        .padStart(2, "0")}`;
    }
    return `${mins.toString().padStart(2, "0")}:${secs
      .toString()
      .padStart(2, "0")}`;
  };

  const handleInputChange = (field, value) => {
    setCallData((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  const handleAddTag = () => {
    if (newTag.trim() && !callData.tags.includes(newTag.trim())) {
      setCallData((prev) => ({
        ...prev,
        tags: [...prev.tags, newTag.trim()],
      }));
      setNewTag("");
    }
  };

  const handleRemoveTag = (tagToRemove) => {
    setCallData((prev) => ({
      ...prev,
      tags: prev.tags.filter((tag) => tag !== tagToRemove),
    }));
  };

  const handleEndCall = () => {
    const finalCallData = {
      ...callData,
      duration: callDuration,
      endTime: new Date().toISOString(),
    };
    onEndCall(call.id, finalCallData);
  };

  const handleClose = () => {
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    onSave(call.id, callData);
    // –ó–∞—Ç–µ–º –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
    onClose();
  };

  const handleMuteToggle = () => {
    setIsMuted(!isMuted);
    console.log("–ú–∏–∫—Ä–æ—Ñ–æ–Ω:", !isMuted ? "–æ—Ç–∫–ª—é—á–µ–Ω" : "–≤–∫–ª—é—á–µ–Ω");
  };

  const handleSpeakerToggle = () => {
    setIsSpeakerOn(!isSpeakerOn);
    console.log("–î–∏–Ω–∞–º–∏–∫:", !isSpeakerOn ? "–≤–∫–ª—é—á–µ–Ω" : "–æ—Ç–∫–ª—é—á–µ–Ω");
  };

  const handleSave = () => {
    if (call && call.id) {
      onSave(call.id, callData);

      console.log("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–∞:", {
        callId: call.id,
        customerName: callData.customerName,
        company: callData.company,
        notes: callData.notes,
      });
      const saveBtn = document.querySelector(".save-btn");
      if (saveBtn) {
        const originalText = saveBtn.innerHTML;
        saveBtn.innerHTML = "‚úì –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ!";
        saveBtn.style.background = "#10b981";

        setTimeout(() => {
          saveBtn.innerHTML = originalText;
          saveBtn.style.background = "";
        }, 2000);
      }
    } else {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ");
    }
  };

  const handleHoldToggle = () => {
    if (!call || !call.id) return;

    const newHoldState = !isOnHold;
    setIsOnHold(newHoldState);

    //***** WEBSOCKET –°–û–ë–´–¢–ò–ï –î–õ–Ø –ü–û–°–¢–ê–ù–û–í–ö–ò –ù–ê –û–ñ–ò–î–ê–ù–ò–ï *****
    if (window.socketEmit) {
      window.socketEmit("hold-call", { callId: call.id, isHold: newHoldState });
    }
    console.log("–°—Ç–∞—Ç—É—Å –æ–∂–∏–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω:", newHoldState);
  };

  const handleTransferCall = () => {
    if (!selectedTransferUser || !call || !call.id) return;

    //***** WEBSOCKET –°–û–ë–´–¢–ò–ï –î–õ–Ø –ü–ï–†–ï–í–û–î–ê –ó–í–û–ù–ö–ê *****
    if (window.socketEmit) {
      window.socketEmit("transfer-call", {
        callId: call.id,
        targetUserId: selectedTransferUser,
        transferReason,
      });
    }

    console.log("–ü–µ—Ä–µ–≤–æ–¥ –∑–≤–æ–Ω–∫–∞:", {
      callId: call.id,
      targetUserId: selectedTransferUser,
      transferReason,
    });

    setShowTransferModal(false);
    setSelectedTransferUser("");
    setTransferReason("");
  };

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–æ–º
  console.log("üéØ ActiveCallCard: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞:", {
    isVisible,
    hasCall: !!call,
    callId: call?.id,
    callStatus: call?.status,
    shouldRender: isVisible && !!call,
  });

  if (!isVisible || !call) {
    console.log("‚ùå ActiveCallCard: –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è - —É—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã");
    return null;
  }

  console.log("‚úÖ ActiveCallCard: —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è!");

  return (
    <div className="active-call-card">
      {/* Header */}
      <div className="active-call-card__header">
        <div className="status">
          <div className="indicator">
            <div
              className={`dot ${
                call.status === "completed" ? "dot--completed" : ""
              }`}
            ></div>
            <span>
              {call.status === "completed"
                ? "–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω"
                : "–ê–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫"}
            </span>
          </div>
          <div className="duration">
            <Clock size={16} />
            <span>{formatDuration(callDuration)}</span>
          </div>
        </div>

        <div className="caller-info">
          <div className="avatar">
            <User size={24} />
          </div>
          <div className="info">
            <div className="number">{call.caller_number}</div>
            <div className="receiver">‚Üí {call.receiver_number}</div>
          </div>
        </div>
      </div>

      {/* Call Controls */}
      <div className="active-call-card__controls">
        <div className="control-buttons">
          <button
            onClick={handleHoldToggle}
            className={`control-btn control-btn--hold ${
              isOnHold ? "active" : ""
            }`}
            title={isOnHold ? "–°–Ω—è—Ç—å —Å –æ–∂–∏–¥–∞–Ω–∏—è" : "–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ"}
            disabled={!call}
          >
            {isOnHold ? <Play size={20} /> : <Pause size={20} />}
          </button>

          <button
            onClick={handleMuteToggle}
            className={`control-btn control-btn--mute ${
              isMuted ? "active" : ""
            }`}
            title={isMuted ? "–í–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω" : "–û—Ç–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω"}
            disabled={!call}
          >
            {isMuted ? <MicOff size={20} /> : <Mic size={20} />}
          </button>

          <button
            onClick={handleSpeakerToggle}
            className={`control-btn control-btn--speaker ${
              isSpeakerOn ? "active" : ""
            }`}
            title={isSpeakerOn ? "–û—Ç–∫–ª—é—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫" : "–í–∫–ª—é—á–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫"}
            disabled={!call}
          >
            {isSpeakerOn ? <Volume2 size={20} /> : <VolumeX size={20} />}
          </button>

          <button
            onClick={() => setShowTransferModal(true)}
            className="control-btn control-btn--transfer"
            title="–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–≤–æ–Ω–æ–∫"
            disabled={!call}
          >
            <UserPlus size={20} />
          </button>

          <button
            onClick={handleEndCall}
            className="control-btn control-btn--end"
            title="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–≤–æ–Ω–æ–∫"
            disabled={!call}
          >
            <PhoneOff size={20} />
          </button>
        </div>
      </div>

      {/* Hold Status */}
      {isOnHold && (
        <div className="active-call-card__hold-status">
          <Pause size={16} />
          <span>–ó–≤–æ–Ω–æ–∫ –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–∏</span>
        </div>
      )}

      {/* Call Information Form */}
      <div className="active-call-card__form">
        <div className="form-section">
          {/* Customer Info */}
          <div className="form-row">
            <div className="form-group">
              <label>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞</label>
              <input
                type="text"
                value={callData.customerName}
                onChange={(e) =>
                  handleInputChange("customerName", e.target.value)
                }
                placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è"
              />
            </div>
            <div className="form-group">
              <label>–ö–æ–º–ø–∞–Ω–∏—è</label>
              <input
                type="text"
                value={callData.company}
                onChange={(e) => handleInputChange("company", e.target.value)}
                placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏"
              />
            </div>
          </div>

          <div className="form-group">
            <label>Email</label>
            <input
              type="email"
              value={callData.email}
              onChange={(e) => handleInputChange("email", e.target.value)}
              placeholder="email@example.com"
            />
          </div>

          {/* Priority and Purpose */}
          <div className="form-row">
            <div className="form-group priority-select">
              <label>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
              <select
                value={callData.priority}
                onChange={(e) => handleInputChange("priority", e.target.value)}
              >
                <option value="low">–ù–∏–∑–∫–∏–π</option>
                <option value="medium">–°—Ä–µ–¥–Ω–∏–π</option>
                <option value="high">–í—ã—Å–æ–∫–∏–π</option>
              </select>
            </div>
            <div className="form-group">
              <label>–¶–µ–ª—å –∑–≤–æ–Ω–∫–∞</label>
              <select
                value={callData.callPurpose}
                onChange={(e) =>
                  handleInputChange("callPurpose", e.target.value)
                }
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å</option>
                <option value="sales">–ü—Ä–æ–¥–∞–∂–∏</option>
                <option value="support">–ü–æ–¥–¥–µ—Ä–∂–∫–∞</option>
                <option value="consultation">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</option>
                <option value="complaint">–ñ–∞–ª–æ–±–∞</option>
                <option value="other">–î—Ä—É–≥–æ–µ</option>
              </select>
            </div>
          </div>

          {/* Tags */}
          <div className="form-group tags-input">
            <label>–¢–µ–≥–∏</label>
            <div className="tags-list">
              {callData.tags.map((tag, index) => (
                <span key={index} className="tag">
                  {tag}
                  <button
                    type="button"
                    onClick={() => handleRemoveTag(tag)}
                    className="remove-btn"
                  >
                    √ó
                  </button>
                </span>
              ))}
            </div>
            <div className="tag-input-row">
              <input
                type="text"
                value={newTag}
                onChange={(e) => setNewTag(e.target.value)}
                onKeyPress={(e) => e.key === "Enter" && handleAddTag()}
                placeholder="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥"
              />
              <button type="button" onClick={handleAddTag} className="add-btn">
                <Tag size={16} />
              </button>
            </div>
          </div>

          {/* Notes */}
          <div className="form-group">
            <label>–ó–∞–º–µ—Ç–∫–∏ –æ –∑–≤–æ–Ω–∫–µ</label>
            <textarea
              value={callData.notes}
              onChange={(e) => handleInputChange("notes", e.target.value)}
              placeholder="–î–µ—Ç–∞–ª–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏, —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏..."
            />
          </div>

          {/* Follow-up */}
          <div className="form-group">
            <label>–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞</label>
            <input
              type="datetime-local"
              value={callData.followUpDate}
              onChange={(e) =>
                handleInputChange("followUpDate", e.target.value)
              }
            />
          </div>
        </div>
      </div>

      {/* Footer Actions */}
      <div className="active-call-card__footer">
        <div className="footer-buttons">
          <button onClick={handleSave} className="save-btn">
            <Save size={16} />
            <span>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</span>
          </button>

          {call?.status === "completed" && (
            <button onClick={handleClose} className="close-btn">
              <span>–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å</span>
            </button>
          )}

          {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          {process.env.NODE_ENV === "development" && (
            <div style={{ fontSize: "12px", color: "#666", marginTop: "10px" }}>
              –°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞: {call?.status || "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"}
            </div>
          )}
        </div>

        <div className="save-info">
          {call?.status === "completed" ? (
            <small>
              –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–∫—Ä–æ–π—Ç–µ –æ–∫–Ω–æ
            </small>
          ) : (
            <small>–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫</small>
          )}
        </div>
      </div>

      {/* Transfer Modal */}
      {showTransferModal && (
        <div className="transfer-modal">
          <div className="transfer-modal__content">
            <div className="transfer-modal__header">
              <h3>–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –∑–≤–æ–Ω–æ–∫</h3>
              <button
                onClick={() => setShowTransferModal(false)}
                className="close-btn"
              >
                √ó
              </button>
            </div>

            <div className="transfer-modal__form">
              <div className="form-group">
                <label>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:</label>
                <select
                  value={selectedTransferUser}
                  onChange={(e) => setSelectedTransferUser(e.target.value)}
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞</option>
                  {availableUsers.map((user) => (
                    <option key={user.id} value={user.id}>
                      {user.first_name} {user.last_name}
                    </option>
                  ))}
                </select>
              </div>

              <div className="form-group">
                <label>–ü—Ä–∏—á–∏–Ω–∞ –ø–µ—Ä–µ–≤–æ–¥–∞:</label>
                <textarea
                  value={transferReason}
                  onChange={(e) => setTransferReason(e.target.value)}
                  placeholder="–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –ø–µ—Ä–µ–≤–æ–¥–∞ –∑–≤–æ–Ω–∫–∞..."
                />
              </div>
            </div>

            <div className="transfer-modal__actions">
              <button
                onClick={() => setShowTransferModal(false)}
                className="btn btn--secondary"
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                onClick={handleTransferCall}
                disabled={!selectedTransferUser}
                className="btn btn--primary"
              >
                –ü–µ—Ä–µ–≤–µ—Å—Ç–∏
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ActiveCallCard;
